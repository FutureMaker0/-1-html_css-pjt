
    // - 설명
    // - role
    //     - **system** : assistant의 역할을 지정해줍니다. (필수로 들어가야하는 항목입니다.)
    //     - **user** : 사용자의 질문 내용을 적을때 사용합니다.
    //     - **assistant** : assistant(AI)가 답변한 내용을 적을때 사용합니다.

    // - content : 메세지 내용
    //     - role이 system인 경우는 AI의 역할을 지정하는 문구입니다.
    //         - 예시)
    //             - You are a helpful assistant.
    //             - assistant는 친절한 파이썬 알고리즘의 힌트를 주는 선생님이다.
    //             - assistant는 시인이다.
    //     - role이 user인 경우에는 유저가 보내는 질문 입니다.
    //         - 예시)
    //             - "지구는 왜 파란가요?"
    //             - "Who won the world series in 2020?"
    //     - role이 assistant 인경우에는 AI가 응답한 답변입니다.
    

        let url = `https://estsoft-openai-api.jejucodingcamp.workers.dev/`;
        let $button1 = document.querySelector('#button1');


        // 학습 데이터들을 넣는 곳
        let data = [{
            "role": "system",
            "content": "assistant는 개발자 양성 교육 전문가이다."
        }, {
            "role": "user",
            "content": "파이썬은 무엇인가요?",
            "content": "장고란 무엇인가요?",
            "content": "html과 css는 무엇인가요?",
            "content": "자바스크립트는 무엇인가요?",
            "content": "성별이 무엇인가요?",
            "content": "전공자인가요?",
            "content": "개발경험이 있나요?",
            "content": "주 사용 언어는 무엇인가요?",
            "content": "기타 기술 스택과 프로젝트 경험이 있나요?",
            "content": "비전공자도 개발자를 할 수 있을까?",
            "content": "파이썬 일주일 학습전략 알려줘.",
            "content": "일주일 뒤 입사를 위한 코딩테스트가 예정되어 있을 때, 대비를 위한 5일짜리 스터디 플랜을 짜줘.",
            "content": "일주일 뒤 카카오 코딩테스트를 앞두고 있을 때, 대비를 위한 일주일짜리 스터디 플랜을 짜줘.",
            "content": "개발하고자하는 서비스를 잘 구현하고 런칭하기 위해서, 사전지식 습득을 위해 1주일짜리 스터디 플랜을 짜줘."    
        }, {
            "role": "assistant", 
            "content": "파이썬(Python)은 프로그래밍 언어 중 하나로, 사용하기 쉽고 배우기 쉬워 많은 사람들이 처음 배울 때 선택하는 언어 중 하나입니다. 파이썬은 인터프리터 언어로, 프로그램을 작성한 후에 즉시 실행 결과를 확인할 수 있어 개발 속도가 빠릅니다. 또한, 다양한 분야에서 활용될 수 있도록 여러 라이브러리와 프레임워크가 제공되어 있어서 데이터 분석, 인공지능, 웹 개발 등 다양한 분야에 사용됩니다. 그 외에도, 파이썬은 대용량의 작업을 간단한 코드로 자동화할 수 있는 기능을 제공하기 때문에, 기업에서는 업무 자동화에 활용되기도 합니다.",
            "content": "장고(Django)는 파이썬으로 작성된 무료 오픈소스 웹 프레임워크입니다. 웹 개발을 빠르고 쉽게 할 수 있도록 많은 기능을 제공합니다. MVC 패턴을 기반으로 한 MTV 패턴(Model-Template-View)을 사용하고 있습니다. 이 패턴은 웹 개발에서 데이터, 사용자 인터페이스, 비즈니스 로직을 분리해 유지보수와 확장성을 높여줍니다. Django는 ORM(Object-Relational Mapping)을 사용하여 데이터베이스 연동을 간편하게 할 수 있도록 지원합니다. 또한, 관리자 페이지 기능과 같은 편리한 기능이 내장되어 있어 개발자의 생산성을 높여줍니다. Django는 대부분의 수요를 충족할 수 있는 강력한 기능들을 제공하며, 페이스북, 인스타그램과 같은 대규모 웹 서비스에서도 사용되고 있습니다.",
            
            "content": "파이썬을 공부하는 계획을 짜는 것은 중요합니다. 파이썬을 처음 공부하는 초보자라면, 아래의 가이드라인이 도움이 될 것입니다.\
                        1. 파이썬 언어 기초 학습: 파이썬을 공부하기 전에, 파이썬의 기본 개념과 구문을 학습해야 합니다. 변수, 조건문, 반복문, 함수 등 파이썬의 기초를 알아보십시오.\
                        2. 파이썬 문제 풀기: 파이썬을 공부하면서 문제를 통해 실습하는 것이 중요합니다. 기초 문제부터 어려운 문제까지 다양한 난이도의 문제를 풀어보십시오.\
                        3. 온라인 강의 수강: 파이썬 공부를 위해 인터넷에는 많은 무료 온라인 강좌가 있습니다. 쉽게 접근할 수 있으니 권장합니다.\
                        4. 마인드맵 작성: 파이썬 공부를 계획하면서 마인드맵을 작성하는 것은 도움이 됩니다. 핵심 개념과 파생 개념, 각 주제간 관계를 시각화해 보십시오.\
                        5. 프로젝트 개발: 파이썬 공부할 때, 여러 프로젝트를 개발하면 실력 향상에 도움이 됩니다. 웹 크롤링, 간단한 게임 개발, 데이터 분석 등 파이썬으로 새로운 것을 만들어 볼 것을 추천합니다.\
                        참고로, 일정 기간만 주어져 있으면 파이썬을 제대로 마스터하기 어렵다고 판단됩니다. 가능하면 꾸준히 연습하고, 계속해서 만족스럽고 흥미로운 코딩을 할 수 있도록 노력해보십시오.",
                                    
            "content": "네, 비전공자도 개발자가 될 수 있습니다. 기본적으로 개발자가 되기 위해서는 프로그래밍 언어를 배우고, 문제 해결 능력을 갖추는 것이 중요합니다. 이를 위해 대학이나 전문 교육 기관에서 전공을 공부하는 것도 좋지만, 최근에는 인터넷을 통해서도 자기 주도적으로 학습하는 것이 가능합니다. 또한, 많은 회사들이 비전공자를 대상으로 하는 코딩 교육 프로그램이나 부트캠프를 운영하고 있어서, 비전공자도 이를 통해 개발자로 전환할 수 있습니다. 이 경우에는 집중력과 열정, 문제 해결 능력, 협업 능력 등의 역량이 중요합니다.",

            "content": "파이썬을 일주일 동안 배우려면 다음과 같은 학습 전략을 추천합니다:\
                        1. 기본 개념 이해하기: 파이썬의 기본적인 개념과 문법을 이해하는 것이 매우 중요합니다. 데이터 타입, 연산자, 변수, 함수, 제어문 등을 배우고 이해해야 합니다.\
                        2. 코딩 연습하기: 파이썬을 배우는 가장 좋은 방법은 코딩을 많이 해보는 것입니다. 예제 코드를 작성하고, 실행시켜 보며 어떻게 동작하는지 이해해보세요.\
                        3. 프로젝트 구상하기: 어떤 프로젝트를 할 것인지 먼저 구상해보세요. 예를 들면, 간단한 게임 만들기, 텍스트 파일 읽고 쓰기, 웹 스크래핑 등이 있을 수 있습니다.\
                        4. 책이나 강의 수강하기: 파이썬을 배우는 데 가장 좋은 방법 중 하나는 책이나 온라인 강의를 수강하는 것입니다. 이 방법으로 입문용 서적이나 인터넷에서 접할 수 있는 무료 강의 등을 찾아보시면 좋습니다.\
                        5. 동영상 강의 시청하기: 온라인에는 여러 무료 동영상 강의가 많이 있습니다. 이런 동영상 강의를 시청하면서 파이썬 개발 과정에 대해 이해할 수 있습니다.\
                        6. 다른 사람의 코드 참고하기: 파이썬 개발에 있어 다른 사람의 코드를 보는 것은 매우 유익한 방법입니다. 이렇게 하는 것으로 어떻게 개발되고 있는지 이해하고 배울 수 있습니다.\
                        7. 지속적인 학습: 일주일 동안 파이썬을 배우면서 그렇게 많은 것을 배울 수는 없습니다. 그러므로 꾸준한 학습을 지속하면서 계속해서 더 많은 것을 배우고 완성도 높은 코드를 만들 수 있도록 노력해보세요.",
                    
            "content": "안녕하세요! 취미로 코딩, 공부, 독서를 하시는 분이신데 사용자 서비스를 런칭하고자 할 때 필요한 파이썬과 장고, 그리고 루비온레일을 다룰 수 있으시다면 대단하십니다! 3일 짜리 스터디 플랜은 다음과 같이 제안해 드립니다.\
                        **Day 1 **\
                        - 파이썬 프로그래밍 및 문법 기초 학습\
                        - 기초 프로그래밍 연습문제 풀이\
                        - 연습문제 코드 리뷰\
                        **Day 2**\
                        - Django 프레임워크 소개 및 개발 환경 설정\
                        - Django 웹 어플리케이션 프로그래밍 및 기능 구현\
                        - 프로그래밍 팀 프로젝트 구성 및 개별 구현\
                        **Day 3**\
                        - Ruby on Rails 소개 및 개발 환경 설정\
                        - Ruby on Rails 웹 어플리케이션 프로그래밍 및 기능 구현\
                        - 프로그래밍 팀 프로젝트 완성 및 코드 리팩토링\
                        위의 스터디 플랜을 따라가시면 파이썬 및 웹 프레임워크 사용에 필요한 기초적인 개념과 문법을 학습할 수 있습니다. 스터디 중 프로그래밍 팀 프로젝트 작업을 통해 실제 어플리케이션을 개발하면서 실전 경험을 쌓을 수 있습니다. 프로젝트 작업이 끝나면 코드 리팩토링을 통해 보다 깔끔하고 효율적인 코드 작성법을 익히도록 하시면 좋을 것 같습니다.",  
    
            "content": "안녕하세요! 취미로 백준과 프로그래머스 문제를 푸시는 분이신데 5일간의 스터디 플랜을 제시해드릴게요.\
                        Day 1:\
                        - 파이썬 기초 문법 학습 (데이터 타입, 제어문, 함수 등)\
                        - 알고리즘 기초 학습 (정렬, 탐색, 재귀, DP 등)\
                        - 백준 및 프로그래머스 실전 연습문제 2-3개 풀이\
                        Day 2:\
                        - 파이썬의 객체지향 프로그래밍 학습\
                        - Django 기초 학습 (MTV 패턴, URL 등록, View 작성 등)\
                        - Django 웹 프로젝트 구성 및 개발 환경 설정\
                        Day 3:\
                        - Django 모델링 학습 (모델 클래스 작성, 관계 설정 등)\
                        - Django ORM 학습 (CRUD, QuerySet, Aggregation 등)\
                        - Django 웹 프로젝트에서 모델, ORM을 활용하여 기본적인 데이터베이스 구축\
                        Day 4:\
                        - 루비온레일즈의 기초 학습 (MVC 패턴, 라우트 등)\
                        - HTML, CSS 학습 (기본 문법, 태그, 선택자, 스타일 등)\
                        - 루비온레일즈 웹 프로젝트 구성 및 개발 환경 설정\
                        Day 5:\
                        - 루비온레일즈 모델링 학습 (Active Record, 데이터베이스 마이그레이션 등)\
                        - 루비온레일즈 웹프로젝트에서 모델, 뷰, 컨트롤러를 활용하여 데이터 CRUD 연습\
                        - 코딩테스트 대비 문제 풀이 및 코드 리뷰\
                        위의 스터디 플랜을 따라가시면 파이썬, 장고, 루비온레일즈, HTML, CSS에 대한 기초 지식을 습득할 수 있을 것입니다. 뿐만 아니라, 알고리즘 기초와 데이터베이스 구축, 코딩테스트 대비까지도 감안하여 다양한 학습이 이루어질 수 있도록 구성해 보았습니다. 가능하다면 각 일자마다 팀프로젝트를 구성하여, 실제 웹 어플리케이션을 개발해 보는 것도 좋을 것 같습니다. 힘드시겠지만, 즐겁게 배우시면 좋겠네요!",
            
            "content": "안녕하세요! 취미로 코딩, 독서, 공부를 하시는 분이신 것 같습니다. 일주일 뒤에 카카오 코딩테스트가 예정되어 있으므로, 대비를 위해 일주일짜리 스터디 플랜을 제시해드리겠습니다.\
                        Day 1:\
                        - 파이썬 기초 문법 학습 (변수, 자료형, 조건문, 반복문, 함수)\
                        - 초보자를 위한 알고리즘 개요 학습 (정렬, 탐색, 그리디 알고리즘)\
                        Day 2:\
                        - 파이썬 심화 문법 학습 (클래스, 메소드, 인스턴스, 상속 등)\
                        - 문자열, 리스트, 딕셔너리 등 파이썬 자료형 학습\
                        - 프로그래머스 레벨1 문제 풀이 (1~2문제)\
                        Day 3:\
                        - 기초적인 자료구조와 알고리즘 학습 (스택, 큐, 트리 등)\
                        - 프로그래머스 레벨2 문제 풀이 (1문제)\
                        Day 4:\
                        - HTTP, RESTful API, JSON 등 웹 기초 지식 학습\
                        - Flask(플라스크) 웹 프레임워크 학습 (라우팅, 템플릿, 데이터베이스 연동 등)\
                        Day 5:\
                        - 데이터베이스 기초 학습 (SQL, 관계형 데이터베이스)\
                        - SQLite 데이터베이스 연동 학습 (데이터 CRUD, 파이썬 셸에서 SQLite 사용)\
                        Day 6:\
                        - 카카오 코딩테스트 유형 분석 및 대비 방법 학습\
                        - 카카오 코딩테스트 예제 문제 풀이 (2~3문제)\
                        - 코드 리뷰와 피드백\
                        Day 7:\
                        - 예비 선발 교육 등에서 중요하게 다루는 영역 (동적 계획법, 네트워크 플로우, 기하 등) 학습\
                        - 카카오 코딩테스트 대비 문제 풀이 및 코드 리뷰\
                        위의 스터디 플랜을 따라가시면, 파이썬 기초부터 시작해서 프로그래밍의 기초를 다지실 수 있습니다. 또한, 웹과 데이터베이스에 대한 기초 지식을 학습해서 실용적인 프로젝트를 만들어 볼 수 있습니다. 마지막으로, 카카오 코딩테스트를 대비하는 시간도 충분히 마련하셨으므로, 조금 더 부담을 덜 수 있을 것입니다. 스터디를 진행하시면서 어려운 부분은 다른 스터디원들에게 질문하거나 구글링을 통해 찾아보시면 도움이 될 것입니다. 시간이 부족할 때는 구성요소를 축소시켜 일부를 선택해서 진행해도 좋습니다. 파이팅하세요!",
            
            "content": "안녕하세요! 개발 관련 취미를 가지고 계시는 분이시군요. 지금 취미로 개발하고자 하는 서비스를 잘 구현하고 런칭하기 위해 1주일 동안 스터디를 진행하고자 하신다면, 다음과 같은 스터디 플랜을 제안해드립니다.\
                        Day 1:\
                        - Python 기초 문법 학습 (변수, 자료형, 조건문, 반복문, 함수)\
                        - 웹 프로그래밍 기초 학습 (HTTP, HTML, CSS)\
                        Day 2:\
                        - Django 웹 프레임워크 입문 (MTV 아키텍처, URL 패턴, 뷰, 템플릿)\
                        - Django 실습 (장고 프로젝트 생성, 프로젝트 기본 설정, 앱 생성, 모델링)\
                        Day 3:\
                        - Django 실습 (모델링, 데이터베이스 마이그레이션, 콘솔을 통한 데이터 CRUD)\
                        - Django Form 학습 (Model Forms, GET and POST 방식 학습, Form Validation)\
                        Day 4:\
                        - Django 실습 (Form 사용, 템플릿 작성, URL 연결, 뷰 작성)\
                        - Bootstrap을 학습하여 UI 디자인 개선\
                        Day 5:\
                        - Django 심화 (CBV, Mixins, Authentication, Session, Permission, Cache)\
                        - Django-REST-Framework 학습 (API 기본 구조, 시리얼라이저, CRUD API 구현)\
                        Day 6:\
                        - 배포 서버 학습 (AWS, Heroku, Linux, Nginx, Gunicorn)\
                        - 서비스 개선 아이디어 논의\
                        Day 7:\
                        - 개선 아이디어 구현과 코드리뷰\
                        - 알고리즘 개론 (정렬, 탐색, 스택, 큐 등)\
                        위 스터디 플랜에 따라서, Django 웹 프레임워크를 이용한 서비스 개발에 필요한 전반적인 부분을 학습하실 수 있습니다. Day 6에서는 배포 관련 서버 설정을 학습하여 로컬 환경에서 개발한 서비스를 실제 서비스 서버에서 서비스할 수 있도록 준비해볼 수 있습니다. 마지막으로, Day 7에서는 알고리즘 기본 개념을 다루어 실제 서비스에서 필요한 데이터를 처리하거나 알고리즘을 적용할 때 가장 효율적인 방법을 찾기 위한 방법론을 학습할 수 있습니다.\
                        이 스터디 플랜을 따라서 진행하면 Django 웹 개발에 대한 전반적인 기초를 이해하시고, 그에 따른 개발 경험을 쌓으실 수 있습니다. 관심 분야에 대해 깊게 파고들어가기 위해서는 일정 기간 동안 꾸준하게 진행하시는 것이 좋습니다. 좋은 결과가 있길 기원합니다!",

            "content": `입력된 정보와 설정하신 목표 ["영화추천 서비스 개발 및 런칭"] 을(를) 토대로 구성한 답변은 아래와 같습니다.

                        안녕하세요! 영화 추천 서비스를 개발하시고 런칭하기 위해 1달이라는 기한이 남았을 때 필요한 스터디 플랜을 제안해드리겠습니다.
                        **Step 1: 요구사항 분석**
                        - 타깃 사용자 파악(성별, 연령대, 영화취향 등)
                        - 어떤 정보를 기반으로 영화 추천을 할 것인가(영화 제목, 감독, 배우 등)
                        - 데이터베이스 모델링(어떤 정보를 저장할 것인가)
                        **Step 2: 환경 설정**
                        - 로컬에 개발 환경 구축하기(Django, HTML, CSS, Bootstrap, PostgreSQL)
                        - 실제 사용할 호스팅 환경 구축하기(Heroku, AWS, etc.)
                        
                        **Step 3: 백엔드 개발**
                        - Django 설치 및 설정
                        - Django 모델링(영화 정보, 유저 정보 등)
                        - 데이터베이스 CRUD 기능 구현
                        - 추천 알고리즘 구현
                        - 회원가입, 로그인, 로그아웃 기능 구현
                        - 영화 평점 및 리뷰 작성 기능 구현
                        - Django REST framework를 이용해 API 개발
                        
                        **Step 4: 프론트엔드 개발**
                        - Bootstrap을 이용한 UI 제작
                        - 영화 목록 페이지, 상세 정보 페이지, 리뷰 페이지 등 구현
                        - AJAX와 jQuery를 이용한 비동기 처리 구현
                        
                        **Step 5: 배포**
                        - Heroku, AWS 등을 이용하여 서버 배포
                        - SSL 인증서 적용
                        - 성능 최적화 및 보안 강화
                        
                        위와 같은 스터디 플랜을 따라서 진행하시면 개발 경험이 있는 경우 1달의 기간 내에 영화 추천 서비스를 개발하고 런칭할 수 있습니다. ESTJ 유형의 경우 체계적으로 일을 하기를 좋아하므로, 저희가 제시한 단계와 각각의 태스크들을 세부적으로 나누어 작업해보시기를 권장드립니다. 그리고 중요한 것은 개발 일정을 미리 계획하여 태스크별로 얼마나 걸릴지 시간적으로 예측하고 일정을 엄수하는 것입니다. 마지막으로, 개발 과정에서 생기는 문제들은 인터넷을 통한 검색이나 개발자 커뮤니티를 통해 해결할 수 있으니 걱정하지 않으셔도 됩니다!`,

                        
            "content": `입력된 정보와 설정하신 목표 ["영화추천 서비스 개발 및 런칭"] 을(를) 토대로 구성한 답변은 아래와 같습니다.

                        감사합니다! 입력해주신 정보와 목표를 바탕으로 스터디 플랜을 제시해드리겠습니다.
                        
                        | 단계 | 작업 내용 | 예상 기간 |
                        |------|----------|-----------|
                        | 1 | 요구사항 분석 | 1일 |
                        | 2 | 환경 설정 | 2일 |
                        | 3 | 백엔드 개발 | 8일 |
                        | 4 | 프론트엔드 개발 | 8일 |
                        | 5 | 배포 | 1일 |
                        
                        1. 요구사항 분석
                        - 서비스의 목표와 기능 파악
                        - 사용자 경험(UX) 파악
                        - 기술적 요구사항 파악
                        - 데이터베이스 모델링
                        - 요구 사항 문서 작성
                        
                        2. 환경 설정
                        - Django 설치 및 모듈 설치
                        - Git 스터디 (Git Bash, Git Hub, 협업 프로젝트)
                        - 개발환경 설정 및 구축
                        - 호스팅 환경 구축
                        
                        3. 백엔드 개발
                        - Django framework를 이용한 구현
                        - 데이터 모델링 및 데이터베이스 구축(PostgreSQL 이용)
                        - CRUD(Create, Read, Update, Delete) 기능 구현
                        - RESTful API 개발
                        - 추천 알고리즘 구현
                        
                        4. 프론트엔드 개발
                        - Frontend Framework을 이용한 UI/UX 제작 (Bootstrap, HTML/CSS)
                        - Vue.js or React.js 공부 및 이용한 UI/UX 구현
                        - 영화 목록 페이지, 상세 정보 페이지, 리뷰 페이지 등 구현
                        - AJAX와 jQuery를 이용한 비동기 처리 구현
                        
                        5. 배포
                        - Heroku/AWS 등을 이용하여 서버 배포
                        - SSL 인증서 적용
                        - 성능 최적화 및 보안 강화
                        
                        위와 같이 구성된 스터디 플랜을 따라서 진행하시면 개발 경험이 있는 경우 1달의 기간 내에 영화 추천 서비스를 개발하고 런칭할 수 있습니다. ENFP 유형의 경우 자유 분방하면서 창의적인 생각을 좋아하십니다. 타이트한 일정에 구애받지 않고 자유롭게 생각하여 개발하시면 더 좋은 결과를 얻을 수 있을 것입니다. 한편, 주어진 일정을 가지고 개발 시간을 계획하여 일정을 엄수하는 것이 중요합니다. 이를 위해 일주일 단위로 계획을 세워 각 단계를 마무리하는 것을 추천드립니다. 목표 달성을 위한 선형적이면서 효율적인 개발 일정을 세우시길 바랍니다.`
                                    

                    },{
            "role": "user", "content": "표로 나타내어 주세요.",
            "role": "user", "content": "나타낸 표의 칸 크기는 최대 글자수를 기준으로 설정하고 글자를 가운데정렬 해주세요.",
            "role": "user", "content": "초보자도 이해할 수 있도록 쉬운 용어로 설명해주세요."

        }]
        
        
        // 사용자가 선택한 입력 데이터를 객체를 만들어서 push
        // input 형식의 데이터만 포함. radio, checkbox 타입 선택정보 추가 구현예정
        const makeData = function () {
            // 목표 데이터 읽어오기
            let $goalInput = document.getElementById("goal");
            goal = $goalInput.value;

            // 기술스택 데이터 읽어오기
            let $techStackInput = document.getElementById("tech-stack");
            techStack = $techStackInput.value;
        
            // 기타입력 및 최종질문 데이터 읽어오기
            let $etcInput = document.getElementById("textarea1");
            etc = $etcInput.value;

            ////
            // 성별 데이터 읽어오기 - select
            let $genderInput = document.getElementById("gender");
            gender = $genderInput.value;
            console.log(gender)

            // mbti 데이터 읽어오기 - select
            let $mbtiInput = document.getElementById("mbti");
            mbti = $mbtiInput.value;
            console.log(mbti)

            // 전공여부 데이터 읽어오기 - radio
            // let $majorInput = document.getElementById("major");
            let $majorInput = document.querySelector('input[name="major"]:checked');
            major = $majorInput.value;

            // 개발경험 데이터 읽어오기 - radio
            let $devExpInput = document.querySelector('input[name="dev-exp"]:checked');
            devExp = $devExpInput.value;

            // 주 사용 언어 데이터 읽어오기 - select
            let $mainLanInput = document.getElementById("main-lan");
            mainLan = $mainLanInput.value;
            console.log(mainLan)
        

            data.push({
                role: "system",
                content: `스터디 플랜을 만들어 줘. 목표:${goal}, 성별:${gender}, mbti:${mbti}, 전공여부:${major}, 개발경험:${devExp}, 주 사용 언어:${mainLan}, 기술스택:${techStack}, 기타정보:${etc} \n 이 데이터를 기반으로 스터디 플랜을 짜줘`,
            
                role: "user",
                content: `스터디 플랜을 만들어 줘. 목표:${goal}, 성별:${gender}, mbti:${mbti}, 전공여부:${major}, 개발경험:${devExp}, 주 사용 언어:${mainLan}, 기술스택:${techStack}, 기타정보:${etc} \n 이 데이터를 기반으로 스터디 플랜을 짜줘`
            })

            $goalInput.value = ''
            $techStackInput.value = ''
            $etcInput.value = ''

            $genderInput.value = '';
            $mbtiInput.value = '';
            $majorInput.checked = false;
            $devExpInput.checked = false;
            $mainLanInput.value = '';
            
        };


        $button1.addEventListener('click', e =>{
            e.preventDefault()
            makeData();
            chatGptAPI()

            //답변 목록도 push를 하면 맥락을 이해하여 답변이 가능하다.
            // day1, day2, day3와 같은 형식으로 답변을 해줘! 라고 미리 학습시켜놓으면
            // split('day') 이런 식으로 카드를 만들 수 있다.
        });


        const chatGptAPI = async () => {
            const result = await fetch(url, {    
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
                redirect: "follow",
            })
            .then(res => res.json())
            .then(res => {
                // console.log(res)
                // console.log(res.choices[0].message.content)

                for (const i of data) {
                    document.querySelector('#contents_question').innerHTML = `입력된 정보와 
                                                                              설정하신 목표 ["` + goal + `"]
                                                                              을(를) 토대로 구성한 답변은 아래와 같습니다.`
                    document.querySelector('#contents_response').innerText = res.choices[0].message.content
                }
            })
            .catch((err) => {
                alert('서버가 멈췄습니다. 최대한 빠르게 복구하도록 하겠습니다.')
                document.write('서버가 멈췄습니다. 최대한 빠르게 복구하도록 하겠습니다.')
            });
        };
